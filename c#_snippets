//многопоточность
Invoke(new Action(() =>
{ 
  //code...
}
));
//многопоточность
Invoke((MethodInvoker)delegate
{
  //code...
});   

//новая задача
Task.Factory.StartNew(() => AlgoTrade.Trade());

//проверка значений на дефолтность
bool isDefault<T>(T o)
{
  return (o == null) ? (default(T) == null) : o.Equals(default(T));
}

//NEWTON JSON
/если распарчиваемом объекте есть null значения
var x = JsonConvert.DeserializeObject<PositionsStruct>(s,new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore});

/если перечисление парсится не значением а индексом
[JsonConverter(typeof(StringEnumConverter))]
public enum WSRequestResult
{
    sucess,
    denied
}

/позволяет распарсивать объект к свойству с другим имененм
//public class RateLimit
{
    [JsonProperty("x-ratelimit-remaining")]
    public int remaining { get; set; }
    [JsonProperty("x-ratelimit-reset")]
    public int reset { get; set; }
    [JsonProperty("x-ratelimit-limit")]
    public int limit { get; set; }
}

/кастомный конвертер
public class PlainJsonStringConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(string);
    }
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        return reader.Value;
    }
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteRawValue("\""+value+"\"");
    }
}
    
[JsonConverter(typeof(PlainJsonStringConverter))]
public decimal? price { get; set; }
        
//исключения
try
{
  //...code  
}
catch (Exception e)
{
    Console.WriteLine(e.Message);
}

//поиск в List<T>
class Book 
  { 
  public int Price { get; set; } 
  public string Name { get; set; } 
  } 
  static void Main(string[] args) 
  { 
  // заполняем книги 
  List<Book> books = new List<Book>(); 
  books.Add(new Book() { Price = 10, Name = "aaa" }); 
  books.Add(new Book() { Price = 13, Name = "eee" }); 
  books.Add(new Book() { Price = 5, Name = "ttt" }); 
  books.Add(new Book() { Price = 45, Name = "ooo" });
  // ищем 1 элемент 
  Book found = books.Find(item => item.Price==13); 
  }
  //отбирает и задает значение по все коллекции
  foreach (Order g in orders.Where(x => x.Range == true)) g.Range = false;
